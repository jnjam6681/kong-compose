version: '2.4'

volumes:
  kong_data:
    driver: ${VOLUMES_DRIVER:-local}

networks:
  kong-net:
    driver: ${NETWORKS_DRIVER:-bridge}

services:

  kong-database:
    image: ${POSTGRES_IMAGE:-postgres:9.6}
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kong}
      POSTGRES_USER: ${POSTGRES_USER:-kong}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kong}
    ports:
      - "5432:5432"
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3

  kong-migration:
    image: ${KONG_IMAGE:-kong:latest}
    command: "kong migrations bootstrap"
    restart: on-failure
    environment:
      KONG_PG_HOST: kong-database
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${POSTGRES_DB:-kong}
      KONG_PG_USER: ${POSTGRES_USER:-kong}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD:-kong}
    networks:
      - kong-net
    links:
      - kong-database
    depends_on:
        kong-database:
          condition: service_healthy

  kong-migrations-up:
    image: "${KONG_IMAGE:-kong:latest}"
    restart: on-failure
    command: kong migrations up && kong migrations finish
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${POSTGRES_DB:-kong}
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${POSTGRES_USER:-kong}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD:-kong}
    networks:
      - kong-net
    links:
      - kong-database
    depends_on:
      kong-database:
        condition: service_healthy

  kong:
    image: ${KONG_IMAGE:-kong:latest}
    restart: always
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      # KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${POSTGRES_DB:-kong}
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${POSTGRES_USER:-kong}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
    ports:
      - "8001:8001"
      - "8000:8000"
      - "8443:8443"
      - "8444:8444"
    networks:
      - kong-net
    depends_on:
      kong-database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10

  konga-prepare:
    image: pantsel/konga:next
    restart: on-failure
    command: "-c prepare -a postgres -u postgresql://${POSTGRES_USER:-kong}:${POSTGRES_PASSWORD:-kong}@kong-database:5432/${POSTGRES_DB:-kong}"
    networks:
      - kong-net
    links:
      - kong-database
    depends_on:
      kong-database:
        condition: service_healthy

  konga:
    image: pantsel/konga:next
    restart: always
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: ${POSTGRES_USER:-kong}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-kong}
      TOKEN_SECRET: ${TOKEN_SECRET:-km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb}
      DB_DATABASE: ${POSTGRES_DB:-kong}
      NODE_ENV: production
    ports:
      - "1337:1337"
    networks:
      - kong-net
    depends_on:
      kong-database:
        condition: service_healthy
